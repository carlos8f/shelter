#!/usr/bin/env node
var cmd = require('commander')
  , keylogger = require('keylogger')
  , logger
  , extra = require('extra')
  , expect = require('stream-expect')
  , through = require('through')
  , format = require('util').format
  , spawns = 0
  , lastSpawn
  , exiting = false

cmd
  .version(require('../package.json').version)
  .usage('[options] -- <cmd> [cmd_options]')
  .parse(process.argv);

if (!extra.cmd) {
  cmd.outputHelp();
  process.exit(1);
}

function log () {
  var args = [].slice.call(arguments);
  args[0] = '[%s] ' + args[0];
  args.splice(1, 0, new Date().toISOString());
  console.error(format.apply(null, args));
}

(function spawn () {
  var proc = extra.spawn();
  proc.stdout.pipe(process.stdout);
  proc.stderr.pipe(process.stderr);
  process.stdin.pipe(proc.stdin);

  process.on('exit', function () {
    exiting = true;
    proc.kill();
  });

  proc.on('exit', function (code) {
    log('exited with code %d', code, '- respawning');
    if (!exiting) spawn();
  });

  if (!spawns) {
    logger = keylogger({stdout: proc.stdout, stderr: proc.stderr});
  }
  else {
    var out = through();
    proc.stdout.pipe(out);
    proc.stderr.pipe(out);
    var e = expect.createExpect(out, proc.stdin);
    Object.keys(logger.data).forEach(function (k) {
      e.expect(new RegExp(k + ':'), function (err, output, match) {
        if (err) throw err;
        e.send(logger.data[k] + '\n');
      });
    });
  }
  spawns++;
  lastSpawn = new Date();
})();
